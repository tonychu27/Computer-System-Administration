
#user  nobody;
worker_processes  1;

# This default error log path is compiled-in to make sure configuration parsing
# errors are logged somewhere, especially during unattended boot when stderr
# isn't normally logged anywhere. This path will be touched on every nginx
# start regardless of error log location configured here. See
# https://trac.nginx.org/nginx/ticket/147 for more info. 
#
error_log  /var/log/nginx/error.log;

#

#pid        logs/nginx.pid;

load_module /usr/local/libexec/nginx/ndk_http_module.so;
load_module /usr/local/libexec/nginx/ngx_http_lua_module.so;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    client_body_in_single_buffer on;

    # log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    server_tokens off;

    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /usr/local/www/nginx;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/www/nginx-dist;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
    	listen 80;
	server_name nasa.123.cs.nycu file.123.cs.nycu adminer.123.cs.nycu;
	return 301 https://$host$request_uri;
    }

    server {
    	listen 443 ssl;
    	server_name nasa.123.cs.nycu;

    	root /home/judge/webserver/nasa.123.cs.nycu;
    	lua_need_request_body on;

    	ssl_certificate /etc/ssl/certs/server.crt;
    	ssl_certificate_key /etc/ssl/private/server.key;

    	auth_basic "Restricted Content";
    	auth_basic_user_file /usr/local/etc/nginx/.htpasswd;

    	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    	access_log /home/judge/webserver/log/access.log combined;

    	location / {
            if ($http_user_agent ~* "no-logging") {
                access_log off;
            }
	
            access_by_lua_block {
                local function get_headers(headers)
        	    local formatted = {}
        	    for key, value in pairs(headers) do
            		table.insert(formatted, key .. ": " .. value)
        	    end
        	    return table.concat(formatted, "\n")
    	        end
          
                -- Read the body
                ngx.req.read_body()
                local request_body = ngx.req.get_body_data() or ""

	        -- Capture request headers
	        local request_header = get_headers(ngx.req.get_headers())

	        -- Save the request information
	        ngx.ctx.request_header = request_header
	        ngx.ctx.request_body = request_body
	    }

	    header_filter_by_lua_block {
    	        local function get_response_headers(headers)
        	    local formatted = {}
        	    for key, value in pairs(headers) do
            	        table.insert(formatted, key .. ": " .. value)
        	    end
        	    return table.concat(formatted, "\n")
    	        end

    	        -- Get headers
    	        ngx.ctx.response_header = get_response_headers(ngx.resp.get_headers())
	    }

	    set $resp_body "";
	    body_filter_by_lua_block {
        	local resp_body = ngx.arg[1]

		ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
		
		if ngx.arg[2] then
     	   	    ngx.var.resp_body = ngx.ctx.buffered
		end
	    }


	    log_by_lua_block {
	        local cjson = require "cjson"
	        local base64 = require "base64"

	        -- Retrieve request data from context
                local request_header = ngx.ctx.request_header or ""
                local request_body = ngx.ctx.request_body or ""
	    
 	        -- Capture response headers
                local response_header = ngx.ctx.response_header or ""
                local response_body = ngx.var.resp_body or ""

		local pattern = "no%-logging"
		if string.match(request_header, pattern) then
		    return
		end

		local user_agent = ""
	        local status_code = ngx.status

	        local log_data = string.format(
                    "Request Headers:\n%s\n\nRequest Body:\n%s\n\nResponse Headers:\n%s\n\nResponse Body:\n%s\n",
                    request_header,   		 -- Request headers
                    request_body,                -- Request body
                    response_header,             -- Response headers
                    response_body                -- Response body
                )


	        local encoded_log = base64.encode(log_data)

	        local file = io.open("/home/judge/webserver/log/access.log", "a")
                file:write("STATUS: " .. status_code .. "\t" .. encoded_log .. "\n")
                file:close()
	    }

	    index index.html;

        }
    }


    upstream backend {
    	server 192.168.123.1:8080;
	server 192.168.123.2:8080;
    }

    server {
        listen 443 ssl;
        server_name file.123.cs.nycu;

	ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;

	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        location / {
	    proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

    }

    server {
        listen 443 ssl;
        server_name adminer.123.cs.nycu;
	
	ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;

	ssl_protocols TLSv1.2 TLSv1.3;
    	ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256';
    	ssl_prefer_server_ciphers on;

    	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    	add_header X-Frame-Options "DENY" always;

	root /usr/local/www/nginx;
	index index.php;

        location / {
	    try_files $uri $uri/ /adminer.php$query_string;
	}

	location ~ \.php$ {
	    include fastcgi_params;
	    fastcgi_pass 127.0.0.1:9000;
	    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	    fastcgi_param HTTPS on;
	}
    }

    server {
        listen 80;
        server_name *.123.cs.nycu;

        location / {
            return 301 https://http.cat/404;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
